#include "shell.h"

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <errno.h>
#include <fcntl.h>
#include <iostream>


using std::cerr;
using std::string;
using std::vector;

int Shell::Execute(const Job& piped_cmds) {
	vector<Command> cmds = piped_cmds.cmds;
	// Create file descriptors to pipe data between commands.
	pid_t pgid;
	if (piped_cmds.cmds.size() == 1 && piped_cmds.cmds[0].argv[0] == "fg") {
		if (background_pgids_.size() == 0) {
			cerr << "No background job." << std::endl;
			return -1;
		}
		pgid = *background_pgids_.rbegin();
		background_pgids_.pop_back();
		killpg(pgid, SIGCONT);
	} else {
		pgid = piped_cmds.Run(path_resolver_);
		if (pgid == -1) {
			return -1;
		}
	}

	int set_foreground_pgid_status = tcsetpgrp(STDIN_FILENO, pgid);
	if (set_foreground_pgid_status == -1) {
		cerr << "Unable to set foreground PGID: " << strerror(errno) << std::endl;
		return -1;
	}

	bool stopped = false;
	bool terminated = false;
	if (piped_cmds.Wait(&stopped, &terminated) == -1) {
		cerr << "Waiting for job failed." << std::endl;
		return -1;
	}
	// How to send a signal to a process group? killpg
	if (stopped && terminated) {
		cerr << "Job returned that it was both stopped and terminated." << std::endl;
		return -1;
	}

	if (stopped) {
		background_pgids_.push_back(pgid);
	}

	// Reset controlling terminal to shell.
	int status = tcsetpgrp(STDIN_FILENO, getpgid(getpid()));
	if (status == -1) {
		cerr << "Unable to reset foreground PGID to shell: " << strerror(errno) << std::endl;
		return -1;
	}

	return 0;
}
