#include "shell.h"

#include <cstdio>
#include <errno.h>
#include <iostream>

using std::cerr;
using std::vector;

struct PipeDescriptor {
	PipeDescriptor(int read_fd_arg, int write_fd_arg): read_fd(read_fd_arg),
		write_fd(write_fd_arg) {}

	int read_fd;
	int write_fd;
};

class Shell {
public:
	int Execute(const PipedCommands& piped_cmds) {
		vector<Command> cmds = piped_cmds.GetCommands();
		// Create file descriptors to pipe data between commands.
		vector<PipeDescriptor> pipe_descriptors;
		for (int i = 0; i < cmds.size() - 1; i++) {
			int pipe_fd[2];
			int status = pipe(pipe_fd);
			if (status == -1) {
				cerr << "Error creating pipe: " << strerror(errno) << std::endl;
				return -1;
			}
			PipeDescriptor pipe_descriptor(pipe_fd[0], pipe_fd[1]);
			pipe_descriptors.push_back(pipe_descriptor);
		}

		for (int i = 0; i < cmds.size(); i++) {
			int pid = fork();
			if (pid == 0) {
				// Set up input/output pipes, if needed.
				if (i > 0) {
					int status = dup2(fileno(stdin), pipe_descriptors[i].read_fd);
					if (status == -1) {
						cerr << "Error setting stdin: " << strerror(errno) << std::endl;
						return -1;
					}
				}
				if (i < cmds.size() - 1) {
					int status = dup2(fileno(stdout), pipe_descriptors[i].write_fd);
					if (status == -1) {
						cerr << "Error setting stdout: " << strerror(errno) << std::endl;
						return -1;
					}
				}

				Command cmd = cmd[i];
				cmd.Run();
				// Should never get here unless there was an error.
				cerr << "Error in running command " << cmd.filename << ": "
					 <<	strerror(errno) << std::endl;
				return -1;
			}
		}
	}
};
