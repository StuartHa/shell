#ifndef SHELL
#define SHELL

#include <iostream>
#include <signal.h>
#include <stack>
#include <string>
#include <unistd.h>
#include <vector>

#include "path_resolver.h"
#include "piped_commands.h"

/*
 *  DONE: Support input/output on each command.
 *  Handle signals properly. ProcessGroup abstraction?
 *  Implement 'cd' shell builtin.
 *  Implement history. Use readline library?
 *  Implement autocompletion.
 */

class Shell {
public:
	Shell(const PathResolver& path_resolver):
		path_resolver_(path_resolver) {
		// Ignore SIGTTOU.
		signal(SIGTTOU, SIG_IGN);
	};

	Shell(): Shell(PathResolver()) {};

	int Execute(const PipedCommands& piped_cmds);
private:
	void Run(Command cmd) const;
	struct PipeDescriptor {
		PipeDescriptor(int read_fd_arg, int write_fd_arg): read_fd(read_fd_arg),
			write_fd(write_fd_arg) {}

		int read_fd;
		int write_fd;

		std::stack<pid_t> background_pgids;
	};

	PathResolver path_resolver_;
};


#endif  //  SHELL
