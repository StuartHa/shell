#include "piped_commands.h"

#include <cstdio>
#include <cstring>
#include <errno.h>
#include "utils/string_utils.h"

using std::cerr;
using std::endl;
using std::string;
using std::vector;

bool SetOutput(const string& output_filename,
			   Command* output_command) {
	FILE* output_file = fopen(output_filename.c_str(), "w");
	if (output_file == nullptr) {
		cerr << "Invalid output file: " << strerror(errno) << endl;
		return false;
	}
	output_command->output = output_file;
	return true;
}

// static
bool Command::Parse(const string command_str,
					Command* output_command) {
	vector<string> tokens = ::utils::Split(command_str, ' ');
	bool next_token_is_output = false;
	bool next_token_is_input = false;
	for (const string& token : tokens) {
		if (next_token_is_output) {

		}


		if (token == ">") {
			next_token_is_output = true;
		} else if (*token.begin() == '>') {
			bool status = SetOutput(token.substr(1), output_command);
			if (!status)
				return false;
		}
		if (*token.begin() == '>') {
			if (token.size() > 1) {

			}
		} else if (*token.begin() == '<') {
			if (token == "<") {
				next_token_is_input = true;
			} else {
				string input_str = token.substr(1);
				FILE* input_file = fopen(input_str.c_str(), "r");
				if (input_file == nullptr) {
					cerr << "Invalid input file: " << strerror(errno) << endl;
					return false;
				}
				output_command->input = input_file;
			}
		}



		}


	}
}

// wc < a.txt | wc
bool PipedCommands::Parse(const string& piped_commands_str,
   	 	 	 	 	   	  PipedCommands* output_piped_commands) {
	vector<string> commands = ::utils::Split(piped_commands_str, '|');

}
