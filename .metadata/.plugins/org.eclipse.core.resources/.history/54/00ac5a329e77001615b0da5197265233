#include "shell.h"

#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <errno.h>
#include <fcntl.h>
#include <iostream>


using std::cerr;
using std::string;
using std::vector;

int Shell::Execute(const Job& piped_cmds) {
	vector<Command> cmds = piped_cmds.cmds;
	// Create file descriptors to pipe data between commands.
	JobDescriptor job_descriptor;
	if (piped_cmds.cmds.size() == 1 && piped_cmds.cmds[0].argv[0] == "fg") {
		if (background_jobs_.size() == 0) {
			cerr << "No background job." << std::endl;
			return -1;
		}
		job_descriptor = *background_jobs_.rbegin();
		background_jobs_.pop_back();
		killpg(job_descriptor.pgid, SIGCONT);
		cerr << "Retrieved background job" << std::endl;
	} else if (piped_cmds.cmds.size() == 1 && piped_cmds.cmds[0].argv[0] == "fg") {

	} else {
		int status = piped_cmds.Run(path_resolver_, &job_descriptor);
		if (piped_cmds.background) {
			background_jobs_.push_back(job_descriptor);
			return 0;
		}
		if (status == -1 || job_descriptor.pgid == -1) {
			return -1;
		}
	}

	int set_foreground_pgid_status = tcsetpgrp(STDIN_FILENO, job_descriptor.pgid);
	if (set_foreground_pgid_status == -1) {
		cerr << "Unable to set foreground PGID: " << strerror(errno) << std::endl;
		return -1;
	}

	JobDescriptor::Status status;
	if (job_descriptor.Wait(&status) == -1) {
		cerr << "Waiting for job failed." << std::endl;
		return -1;
	}

	if (status == JobDescriptor::Status::STOPPED) {
		background_jobs_.push_back(job_descriptor);
	}

	// Reset controlling terminal to shell.
	int error = tcsetpgrp(STDIN_FILENO, getpgid(getpid()));
	if (error == -1) {
		cerr << "Unable to reset foreground PGID to shell: " << strerror(errno) << std::endl;
		return -1;
	}

	return 0;
}
