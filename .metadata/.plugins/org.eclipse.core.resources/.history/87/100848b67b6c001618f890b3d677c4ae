#include <cstdio>
#include <cstring>
#include <fcntl.h>
#include <gtest/gtest.h>
#include <gmock/gmock.h>
#include <iostream>
#include <fstream>
#include <sstream>

#include "shell.h"
#include "utils/test_utils.h"

using std::string;
using std::vector;

FILE* CreateOutputFile(const string& file_name) {
	const string dir_base_path = getenv("TEST_TMPDIR");
	const string output_file_path = dir_base_path +
		"/" + file_name;
	return fopen(output_file_path.c_str(), "w");
}

string ReadFile(const string& dir_base_path, const string& file_name) {
	const string output_file_path = dir_base_path +
		"/" + file_name;
	std::ifstream t(file_name);
	std::stringstream buffer;
	buffer << t.rdbuf();
	return buffer.str();

}

TEST(Execute, ls) {
	// Create a directory with a single empty file.
	CreateDirectoryWithFiles("test_ls", vector<string>{"a"});
	string output_file_name = "ls_output.dat";
	FILE* output_file = CreateOutputFile(output_file_name);

	Command cmd;
	cmd.filename = "ls";
	string path_to_output_file = string(getenv("TEST_TMPDIR")) + "/test_ls";
	cmd.argv = {"ls", path_to_output_file.c_str()};

	Shell shell;
	shell.Execute(cmd, output_file);

	EXPECT_EQ(ReadFile(output_file_name), "a\n");
}
