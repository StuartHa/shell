#include <cstdlib>
#include <fcntl.h>
#include <gtest/gtest.h>
#include <gmock/gmock.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>

#include "path_resolver.h"
#include "string_utils.h"

using std::string;
using std::vector;

void CreateDirectoryWithFiles(const string& dir_name,
							  const vector<string>& file_names) {
	const string dir_base_path = getenv("TEST_TMPDIR");
	const string dir_path = dir_base_path +
		(*dir_base_path.rbegin() == '/' ? "" : "/") + dir_name;
	mkdir(dir_path.c_str(), /*octal*/ 0777);

	for (const string& file_name : file_names) {
		string file_path = dir_path + "/" + file_name;
		// Create file by opening and closing it.
		int fd = open(file_path.c_str(), O_CREAT | O_EXCL);
		close(fd);
	}
}

TEST(Resolve, Basic) {
	CreateDirectoryWithFiles("test", vector<string>{"a", "b", "c"});
	string dir_base_path = string(getenv("TEST_TMPDIR")) + "/";
	PathResolver path_resolver(dir_base_path + "test");

	EXPECT_EQ(dir_base_path + "test/a", path_resolver.Resolve("a"));
	EXPECT_EQ(dir_base_path + "test/b", path_resolver.Resolve("b"));
	EXPECT_EQ(dir_base_path + "test/c", path_resolver.Resolve("c"));
}
